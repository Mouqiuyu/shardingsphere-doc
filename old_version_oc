commit 78eee211e3b085128d3703676b3f431dd39f0a7e
Author: liyao <maxwell92@126.com>
Date:   Thu Mar 16 15:12:25 2023 +0800

    chore: update examples and README docs (#267)
    
    * chore: add shardingsphere operator examples
    
    Signed-off-by: mlycore <maxwell92@126.com>
    
    * chore: update README
    
    Signed-off-by: mlycore <maxwell92@126.com>
    
    * chore: update index docs
    
    Signed-off-by: mlycore <maxwell92@126.com>
    
    * chore: update operator docs
    
    Signed-off-by: mlycore <maxwell92@126.com>
    
    * fix: fix license header
    
    Signed-off-by: mlycore <maxwell92@126.com>
    
    ---------
    
    Signed-off-by: mlycore <maxwell92@126.com>

diff --git a/docs/content/operation-guide/operator/_index.cn.md b/docs/content/operation-guide/operator/_index.cn.md
index 7df0e59..7361e2e 100644
--- a/docs/content/operation-guide/operator/_index.cn.md
+++ b/docs/content/operation-guide/operator/_index.cn.md
@@ -28,6 +28,14 @@ cd ../
 helm install shardingsphere-cluster apache-shardingsphere-operator-charts -n shardingsphere-operator
 ```
 
+### 试用 ComputeNode
+
+需要按照如下命令安装 ShardingSphere Operator:
+
+```shell
+helm install [RELEASE_NAME] shardingsphere/apache-shardingsphere-operator-charts --set operator.featureGates.computeNode=true --set proxyCluster.enabled=false
+```
+
 ## 参数
 
 ### 通用参数
@@ -98,6 +106,40 @@ helm install shardingsphere-cluster apache-shardingsphere-operator-charts -n sha
 | `zookeeper.persistence.accessModes`  | Persistent Volume access modes                       | `["ReadWriteOnce"]` |
 | `zookeeper.persistence.size`         | Persistent Volume size                               | `8Gi`               |
 
+
+### ShardingSphere ComputeNode 参数
+
+| Name                                        | Description                                                                                            | Value               |
+| --------------------------------------------| ------------------------------------------------------------------------------------------------------ | ------------------- |
+| `computeNode.storageNodeConnector.type`     | ShardingSphere-Proxy driver type                                                                       | `mysql`             |
+| `computeNode.storageNodeConnector.version`  | ShardingSphere-Proxy driver version. The MySQL driver need to be downloaded according to this version  | `5.1.47`            |
+| `computeNode.serverVersion`                 | ShardingSphere-Proxy cluster version                                                                   | `5.3.1`             |
+| `computeNode.portBindings[0].name`          | ShardingSphere-Proxy port name                                                                         | `3307`              |
+| `computeNode.portBindings[0].containerPort` | ShardingSphere-Proxy port for container                                                                | `3307`              |
+| `computeNode.portBindings[0].servicePort`   | ShardingSphere-Proxy port for service                                                                  | `3307`              |
+| `computeNode.portBindings[0].procotol`      | ShardingSphere-Proxy port protocol                                                                     | `TCP`               |
+| `computeNode.serviceType`                   | ShardingSphere-Proxy service type                                                                      | `ClusterIP`         |
+
+
+### ShardingSphere ComputeNode Bootstrap 参数 
+
+| Name                                                                           | Description                                                         | Value                                                                  |
+|--------------------------------------------------------------------------------| ------------------------------------------------------------------- | ---------------------------------------------------------------------- |
+| `computeNode.bootstrap.serverConfig.authority.privilege.type`    | authority provider for storage node, the default value is ALL_PERMITTED                                                                        | `ALL_PRIVILEGES_PERMITTED` |
+| `computeNode.bootstrap.serverConfig.authority.users[0].user`     | Username,authorized host for compute node. Format: <username>@<hostname> hostname is % or empty string means do not care about authorized host | `root@%`                   |
+| `computeNode.bootstrap.serverConfig.authority.users[0].password` | Password for compute node.                                                                                                                     | `root`                     |
+| `computeNode.bootstrap.serverConfig.mode.type`                                          | Type of mode configuration. Now only support Cluster mode           | `Cluster`                                                              |
+| `computeNode.bootstrap.serverConfig.mode.repository.type`                               | Type of persist repository. Now only support ZooKeeper              | `ZooKeeper`                                                            |
+| `computeNode.bootstrap.mode.repository.props.timeToLiveSeconds`            | Seconds of ephemeral data live                                      | `600`                                                                  |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.serverlists`                 | Server lists of registry center                                     | `{{ printf "%s-zookeeper.%s:2181" .Release.Name .Release.Namespace }}` |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.retryIntervalMilliseconds`    | Milliseconds of retry interval                                      | `500`                                                                  |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.operationTimeoutMilliseconds` | Milliseconds of operation timeout                                   | `5000`                                                                 |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.namespace`                    | Namespace of registry center                                        | `governance_ds`                                                        |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.maxRetries`                   | Max retries of client connection                                    | `3`                                                                    |
+| `computeNode.bootstrap.serverConfig.mode.overwrite`                                     | Whether overwrite persistent configuration with local configuration | `true`                                                                 |
+| `computeNode.bootstrap.serverConfig.props.proxy-frontend-database-protocol-type`        | Default startup protocol                                            | `MySQL`                                                                |
+
+
 ## 配置示例
 
 apache-shardingsphere-cluster-operator-charts/values.yaml
diff --git a/docs/content/operation-guide/operator/_index.en.md b/docs/content/operation-guide/operator/_index.en.md
index 0e59085..69d8422 100644
--- a/docs/content/operation-guide/operator/_index.en.md
+++ b/docs/content/operation-guide/operator/_index.en.md
@@ -99,6 +99,38 @@ helm install shardingsphere-cluster apache-shardingsphere-operator-charts -n sha
 | `zookeeper.persistence.accessModes`  | Persistent Volume access modes                       | `["ReadWriteOnce"]` |
 | `zookeeper.persistence.size`         | Persistent Volume size                               | `8Gi`               |
 
+### ShardingSphere ComputeNode Parameters 
+
+| Name                                        | Description                                                                                            | Value               |
+| --------------------------------------------| ------------------------------------------------------------------------------------------------------ | ------------------- |
+| `computeNode.storageNodeConnector.type`     | ShardingSphere-Proxy driver type                                                                       | `mysql`             |
+| `computeNode.storageNodeConnector.version`  | ShardingSphere-Proxy driver version. The MySQL driver need to be downloaded according to this version  | `5.1.47`            |
+| `computeNode.serverVersion`                 | ShardingSphere-Proxy cluster version                                                                   | `5.3.1`             |
+| `computeNode.portBindings[0].name`          | ShardingSphere-Proxy port name                                                                         | `3307`              |
+| `computeNode.portBindings[0].containerPort` | ShardingSphere-Proxy port for container                                                                | `3307`              |
+| `computeNode.portBindings[0].servicePort`   | ShardingSphere-Proxy port for service                                                                  | `3307`              |
+| `computeNode.portBindings[0].procotol`      | ShardingSphere-Proxy port protocol                                                                     | `TCP`               |
+| `computeNode.serviceType`                   | ShardingSphere-Proxy service type                                                                      | `ClusterIP`         |
+
+
+### ShardingSphere ComputeNode Bootstrap Parameters
+
+| Name                                                                           | Description                                                         | Value                                                                  |
+|--------------------------------------------------------------------------------| ------------------------------------------------------------------- | ---------------------------------------------------------------------- |
+| `computeNode.bootstrap.serverConfig.authority.privilege.type`    | authority provider for storage node, the default value is ALL_PERMITTED                                                                        | `ALL_PRIVILEGES_PERMITTED` |
+| `computeNode.bootstrap.serverConfig.authority.users[0].user`     | Username,authorized host for compute node. Format: <username>@<hostname> hostname is % or empty string means do not care about authorized host | `root@%`                   |
+| `computeNode.bootstrap.serverConfig.authority.users[0].password` | Password for compute node.                                                                                                                     | `root`                     |
+| `computeNode.bootstrap.serverConfig.mode.type`                                          | Type of mode configuration. Now only support Cluster mode           | `Cluster`                                                              |
+| `computeNode.bootstrap.serverConfig.mode.repository.type`                               | Type of persist repository. Now only support ZooKeeper              | `ZooKeeper`                                                            |
+| `computeNode.bootstrap.mode.repository.props.timeToLiveSeconds`            | Seconds of ephemeral data live                                      | `600`                                                                  |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.serverlists`                 | Server lists of registry center                                     | `{{ printf "%s-zookeeper.%s:2181" .Release.Name .Release.Namespace }}` |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.retryIntervalMilliseconds`    | Milliseconds of retry interval                                      | `500`                                                                  |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.operationTimeoutMilliseconds` | Milliseconds of operation timeout                                   | `5000`                                                                 |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.namespace`                    | Namespace of registry center                                        | `governance_ds`                                                        |
+| `computeNode.bootstrap.serverConfig.mode.repository.props.maxRetries`                   | Max retries of client connection                                    | `3`                                                                    |
+| `computeNode.bootstrap.serverConfig.mode.overwrite`                                     | Whether overwrite persistent configuration with local configuration | `true`                                                                 |
+| `computeNode.bootstrap.serverConfig.props.proxy-frontend-database-protocol-type`        | Default startup protocol                                            | `MySQL`                                                                |
+
 ## Examples
 
 apache-shardingsphere-clutser-operator-charts/values.yaml
diff --git a/docs/content/overview/_index.cn.md b/docs/content/overview/_index.cn.md
index 123a337..965467a 100644
--- a/docs/content/overview/_index.cn.md
+++ b/docs/content/overview/_index.cn.md
@@ -36,6 +36,9 @@ ShardingSphere-on-Cloud 项目是面向 Apache ShardingSphere 的云上解决方
 - 基于 Operator 的 ShardingSphere Proxy 在 kubernetes 环境下一键部署和自动运维
 - 基于 AWS CloudFormation 的 ShardingSphere Proxy 快速部署
 - 基于 Terraform 的 AWS 环境下 ShardingSphere Proxy 快速部署
+- Point-in-Time Recovery 时间点还原 Demo
+- Grafana Dashboard 模板
+- 基于 WebAssembly 的 ShardingSphere 插件拓展 demo
 
 ## 应用场景
 
diff --git a/docs/content/overview/_index.en.md b/docs/content/overview/_index.en.md
index 998a461..6b2053c 100644
--- a/docs/content/overview/_index.en.md
+++ b/docs/content/overview/_index.en.md
@@ -38,6 +38,9 @@ Currently, the terms involved in this project are from common cloud service prov
 - One click deployment and automatic DevOps of ShardingSphere Proxy based on Operator in a Kubernetes environment.
 - Rapid deployment of ShardingSphere Proxy based on AWS CloudFormation.
 - Rapid deployment of ShardingSphere Proxy based on Terraform in an AWS environment.
+- Point-in-Time-Recovery demo For ShardingSphere.
+- Grafana template For ShardingSphere.
+- WebAssembly extension demo For ShardingSphere.
 
 ## Application Scenarios
 
