commit c8c7ea030458192c0ad0c2b8432aae90ad3efb44
Author: 孙念君 Nianjun Sun <sunnianjun@apache.org>
Date:   Wed Jun 21 08:45:30 2023 +0800

    Fix deadlink (#26475)
    
    * Fix : fix the incorrect link for YamlSingleRuleConfigurationSwapper (#26456)
    
    * Fix : fix the incorrect link for document (#26456)

diff --git a/docs/blog/content/material/2022_06_08_How_does_Apache_ShardingSphere_standardize_and_format_code_We use_Spotless.en.md b/docs/blog/content/material/2022_06_08_How_does_Apache_ShardingSphere_standardize_and_format_code_We_use_Spotless.en.md
similarity index 100%
rename from docs/blog/content/material/2022_06_08_How_does_Apache_ShardingSphere_standardize_and_format_code_We use_Spotless.en.md
rename to docs/blog/content/material/2022_06_08_How_does_Apache_ShardingSphere_standardize_and_format_code_We_use_Spotless.en.md
diff --git a/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new API driver_Apache_ShardingSphere_5.1.2_is_released.en.md b/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
similarity index 100%
rename from docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new API driver_Apache_ShardingSphere_5.1.2_is_released.en.md
rename to docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
diff --git a/docs/blog/content/material/2022_07_12_ShardingSphere_Cloud_Applications_ An_out-of-the-box_ShardingSphere-Proxy_Cluster.en.md b/docs/blog/content/material/2022_07_12_ShardingSphere_Cloud_Applications_An_out-of-the-box_ShardingSphere-Proxy_Cluster.en.md
similarity index 100%
rename from docs/blog/content/material/2022_07_12_ShardingSphere_Cloud_Applications_ An_out-of-the-box_ShardingSphere-Proxy_Cluster.en.md
rename to docs/blog/content/material/2022_07_12_ShardingSphere_Cloud_Applications_An_out-of-the-box_ShardingSphere-Proxy_Cluster.en.md
diff --git a/docs/blog/content/material/2022_11_24_ShardingSphere-on-Cloud_&_Pisanix_replace_Sidecar_for_a_true_cloud-native_experience.en.md b/docs/blog/content/material/2022_11_24_ShardingSphere-on-Cloud_&_Pisanix_replace_Sidecar_for_a_true_cloud-native_experience.en.md
index b68bf8f75d2..9a382d98f99 100644
--- a/docs/blog/content/material/2022_11_24_ShardingSphere-on-Cloud_&_Pisanix_replace_Sidecar_for_a_true_cloud-native_experience.en.md
+++ b/docs/blog/content/material/2022_11_24_ShardingSphere-on-Cloud_&_Pisanix_replace_Sidecar_for_a_true_cloud-native_experience.en.md
@@ -58,7 +58,7 @@ ShardingSphere-Sidecar is only a deployment mode of ShardingSphere in cloud nati
 
 **Therefore, we needed to redesign an open source product with higher adaptability, availability and agility in a cloud native system - in order to make up for ShardingSphere's limitations on cloud data governance.**
 
-That is why some of our community members at [SphereEx](https://www.sphere-ex.com/en/) developed [Pisanix, a cloud-native data governance tool](https://www.sphere-ex.com/news/43/), based on the Database Mesh concept. It can provide capabilities such as SQL-aware traffic governance, runtime resource-oriented management and DBRE.
+That is why some of our community members at [SphereEx](https://www.sphere-ex.com/) developed [Pisanix, a cloud-native data governance tool](https://www.sphere-ex.com/news/43/), based on the Database Mesh concept. It can provide capabilities such as SQL-aware traffic governance, runtime resource-oriented management and DBRE.
 
 ## Is Pisanix the same with ShardingSphere-Sidecar?
 
diff --git "a/docs/blog/content/material/2023_04_27_How_South_Korea\342\200\231s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md" "b/docs/blog/content/material/2023_04_27_How_South_Korea\342\200\231s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md"
index de4996fdfc2..5fa8d052685 100644
--- "a/docs/blog/content/material/2023_04_27_How_South_Korea\342\200\231s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md"
+++ "b/docs/blog/content/material/2023_04_27_How_South_Korea\342\200\231s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md"
@@ -6,7 +6,7 @@ chapter = true
 
 [Yogiyo](https://www.yogiyo.co.kr/mobile/#/) is South Korea’s leading mobile and online food delivery platform that seeks to offer customers powerful and convenient food ordering services. Formerly a subsidiary of [Delivery Hero](https://www.deliveryhero.com/), Yogiyo was acquired by [GS Retail](http://www.gsretail.com/gsretail/ko/company), one of Korea’s top ten listed companies, for $684 million at the end of 2021.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md1.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md1.jpg)
 
 Hello! My name is [Byungchul Kim](https://twitter.com/edwardjyoon), and I work as a backend developer at Yogiyo R&D Centre on Orderyo, an ordering service. In this post, I want to share our experience implementing [Apache ShardingSphere](https://shardingsphere.apache.org/) for Yogiyo’s order service and explain how it helped us to solve technical debt and meet new requirements.
 
@@ -14,17 +14,17 @@ Hello! My name is [Byungchul Kim](https://twitter.com/edwardjyoon), and I work a
 
 Let me start by showing you the structure of Yogiyo’s order service. When order creation, cancellation, or update traffic occurs, the Orderyo application code distributes the write load to four shard clusters based on the `customer_id`. This way, the application only needs the `customer_id` to find the shard cluster it needs to access and perform the operation.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md2.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md2.jpg)
 
 Introducing sharding to the order service has improved the overall response time of `customer_id-based` order functions, eliminated many bottlenecks at the database end by distributing the DB load, and allowed us to scale the DB appropriately for future traffic growth. However, we also realized a technical debt during the past year of implementing and running database sharding for Yogiyo’s order service. The structure of the DB did not reflect the integrated lookup requirements.
 
 Most of the traffic from the order service functions has a `customer_id`, so we use a shard DB. In addition, we have the source data of the order, so there is a requirement for an integrated query without sharding key in the operation-oriented and boss-oriented functions. To support operational queries, we collected data by replicating from shard DBs to a single DB, which we called the Integration DB.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md3.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md3.jpg)
 
 In this structure, as the throughput of the shards increases, the load is placed on the single Integration DB, making it a bottleneck. This means that horizontal DB scaling, one of the advantages of sharding, is not available.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md4.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md4.jpg)
 
 In our tests, the threshold for horizontal scaling was well above our current traffic, but with new requirements, this became an issue that needed to be addressed.
 
@@ -188,7 +188,7 @@ After confirming the functional replacement in our local and staging environment
 
 To achieve this, we enlisted our internal infrastructure and automation teams to conduct performance tests in the same environment as production. These tests involved comparing our existing Integration DB with the limitations imposed by the ShardingSphere-Proxy structure, and we utilized the testing tool locust to facilitate the process.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md5.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md5.jpg)
 
 The performance tests revealed significant differences between the two structures within the same user pool.
 
@@ -205,7 +205,7 @@ After careful consideration, we decided to implement Apache ShardingSphere, an o
 
 I hope this article helps those facing challenges with implementing an efficient sharding structure due to specific requirements. If I have the opportunity, I will write another article on the issues and performance enhancements related to using ShardingSphere.
 
-![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md6.jpeg)
+![img](https://shardingsphere.apache.org/blog/img/2023_04_27_How_South_Korea’s_Yogiyo_Improved_Scalability_and_Performance_with_Apache_ShardingSphere.en.md6.jpg)
 
 To conclude, I would like to express my gratitude to my team, as well as the infrastructure and performance testing teams, for their invaluable support during the implementation of ShardingSphere.
 
diff --git a/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.cn.md b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD_Baitiao_Story_of_an_Implementation_Journey.cn.md
similarity index 100%
rename from docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.cn.md
rename to docs/blog/content/material/Oct_12_9_ShardingSphere_JD_Baitiao_Story_of_an_Implementation_Journey.cn.md
diff --git a/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD_Baitiao_Story_of_an_Implementation_Journey.en.md
similarity index 100%
rename from docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md
rename to docs/blog/content/material/Oct_12_9_ShardingSphere_JD_Baitiao_Story_of_an_Implementation_Journey.en.md
diff --git a/docs/document/content/dev-manual/configuration.cn.md b/docs/document/content/dev-manual/configuration.cn.md
index 0b4a4bfee28..421c3f47e1f 100644
--- a/docs/document/content/dev-manual/configuration.cn.md
+++ b/docs/document/content/dev-manual/configuration.cn.md
@@ -46,7 +46,7 @@ chapter = true
 | AUTHORITY           | 用于将权限规则的 YAML 配置转化为权限规则标准配置       | [`org.apache.shardingsphere.authority.yaml.swapper.YamlAuthorityRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/authority/core/src/main/java/org/apache/shardingsphere/authority/yaml/swapper/YamlAuthorityRuleConfigurationSwapper.java)                                                 |
 | SQL_PARSER          | 用于将 SQL 解析的 YAML 配置转化为 SQL 解析标准配置 | [`org.apache.shardingsphere.parser.yaml.swapper.YamlSQLParserRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/sql-parser/core/src/main/java/org/apache/shardingsphere/parser/yaml/swapper/YamlSQLParserRuleConfigurationSwapper.java)                                                          |
 | TRANSACTION         | 用于将事务的 YAML 配置转化为事务标准配置           | [`org.apache.shardingsphere.transaction.yaml.swapper.YamlTransactionRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/transaction/core/src/main/java/org/apache/shardingsphere/transaction/yaml/swapper/YamlTransactionRuleConfigurationSwapper.java)                                       |
-| SINGLE              | 用于将单表的 YAML 配置转化为单表标准配置           | [`org.apache.shardingsphere.singletable.yaml.config.swapper.YamlSingleRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/single-table/core/src/main/java/org/apache/shardingsphere/singletable/yaml/config/swapper/YamlSingleRuleConfigurationSwapper.java)                                  |
+| SINGLE              | 用于将单表的 YAML 配置转化为单表标准配置           | [`org.apache.shardingsphere.singletable.yaml.config.swapper.YamlSingleRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/single/core/src/main/java/org/apache/shardingsphere/single/yaml/config/swapper/YamlSingleRuleConfigurationSwapper.java)                                  |
 | SHARDING            | 用于将分片的 YAML 配置转化为分片标准配置           | [`org.apache.shardingsphere.sharding.yaml.swapper.YamlShardingRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/yaml/swapper/YamlShardingRuleConfigurationSwapper.java)                                                    |
 | READWRITE_SPLITTING | 用于将读写分离的 YAML 配置转化为读写分离标准配置       | [`org.apache.shardingsphere.readwritesplitting.yaml.swapper.YamlReadwriteSplittingRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/readwrite-splitting/core/src/main/java/org/apache/shardingsphere/readwritesplitting/yaml/swapper/YamlReadwriteSplittingRuleConfigurationSwapper.java) |
 | DB_DISCOVERY        | 用于将数据库发现的 YAML 配置转化为数据库发现标准配置     | [`org.apache.shardingsphere.dbdiscovery.yaml.swapper.YamlDatabaseDiscoveryRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/db-discovery/core/src/main/java/org/apache/shardingsphere/dbdiscovery/yaml/swapper/YamlDatabaseDiscoveryRuleConfigurationSwapper.java)                        |
diff --git a/docs/document/content/dev-manual/configuration.en.md b/docs/document/content/dev-manual/configuration.en.md
index c9adebb8b07..74c4107fa24 100644
--- a/docs/document/content/dev-manual/configuration.en.md
+++ b/docs/document/content/dev-manual/configuration.en.md
@@ -46,7 +46,7 @@ Used to convert YAML configuration to standard user configuration
 | AUTHORITY            | Used to convert the YAML configuration of authority rules into standard configuration of authority rules               | [`org.apache.shardingsphere.authority.yaml.swapper.YamlAuthorityRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/authority/core/src/main/java/org/apache/shardingsphere/authority/yaml/swapper/YamlAuthorityRuleConfigurationSwapper.java)                                                 |
 | SQL_PARSER           | Used to convert the YAML configuration of the SQL parser into the standard configuration of the SQL parser             | [`org.apache.shardingsphere.parser.yaml.swapper.YamlSQLParserRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/sql-parser/core/src/main/java/org/apache/shardingsphere/parser/yaml/swapper/YamlSQLParserRuleConfigurationSwapper.java)                                                          |
 | TRANSACTION          | Used to convert the YAML configuration of the transaction into the standard configuration of the transaction           | [`org.apache.shardingsphere.transaction.yaml.swapper.YamlTransactionRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/transaction/core/src/main/java/org/apache/shardingsphere/transaction/yaml/swapper/YamlTransactionRuleConfigurationSwapper.java)                                       |
-| SINGLE               | Used to convert the YAML configuration of the single table into the standard configuration of the single table         | [`org.apache.shardingsphere.singletable.yaml.config.swapper.YamlSingleRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/single-table/core/src/main/java/org/apache/shardingsphere/singletable/yaml/config/swapper/YamlSingleRuleConfigurationSwapper.java)                                  |
+| SINGLE               | Used to convert the YAML configuration of the single table into the standard configuration of the single table         | [`org.apache.shardingsphere.singletable.yaml.config.swapper.YamlSingleRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/kernel/single/core/src/main/java/org/apache/shardingsphere/single/yaml/config/swapper/YamlSingleRuleConfigurationSwapper.java)                                  |
 | SHARDING             | Used to convert the YAML configuration of the sharding into the standard configuration of the sharding                 | [`org.apache.shardingsphere.sharding.yaml.swapper.YamlShardingRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/yaml/swapper/YamlShardingRuleConfigurationSwapper.java)                                                    |
 | READWRITE_SPLITTING  | Used to convert the YAML configuration of read-write splitting into the standard configuration of read-write splitting | [`org.apache.shardingsphere.readwritesplitting.yaml.swapper.YamlReadwriteSplittingRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/readwrite-splitting/core/src/main/java/org/apache/shardingsphere/readwritesplitting/yaml/swapper/YamlReadwriteSplittingRuleConfigurationSwapper.java) |
 | DB_DISCOVERY         | Used to convert the YAML configuration of database discovery into the standard configuration of database discovery     | [`org.apache.shardingsphere.dbdiscovery.yaml.swapper.YamlDatabaseDiscoveryRuleConfigurationSwapper`](https://github.com/apache/shardingsphere/blob/master/features/db-discovery/core/src/main/java/org/apache/shardingsphere/dbdiscovery/yaml/swapper/YamlDatabaseDiscoveryRuleConfigurationSwapper.java)                        |
