commit df0d6159e47b885c323a9d967a0621addb702358
Author: ChenJiaHao <Pace2Car@163.com>
Date:   Sun Mar 12 19:35:44 2023 +0800

    Update documents for optional plugins and mode config (#24542)
    
    * Update document for optional plugins and mode config
    
    * fix comma

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.cn.md
new file mode 100644
index 00000000000..703c1d6dab7
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.cn.md
@@ -0,0 +1,58 @@
++++
+title = "可选插件"
+weight = 6
++++
+
+ShardingSphere 默认情况下仅包含核心 SPI 的实现，在 Git Source 存在一部分包含第三方依赖的 SPI
+实现的插件未包含在内。可在 https://central.sonatype.dev/ 进行检索。
+
+所有插件对应的 SPI 和 SPI 的已有实现类均可在 https://shardingsphere.apache.org/document/current/cn/dev-manual/ 检索。
+
+下以 `groupId:artifactId` 的表现形式列出 ShardingSphere-JDBC 所有的内置插件。
+
+- `org.apache.shardingsphere:shardingsphere-authority-core`，用户权限加载逻辑核心
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-core`，集群模式配置信息持久化定义核心
+- `org.apache.shardingsphere:shardingsphere-db-discovery-core`，高可用核心
+- `org.apache.shardingsphere:shardingsphere-encrypt-core`，数据加密核心
+- `org.apache.shardingsphere:shardingsphere-encrypt-sm`， SM 加密算法
+- `org.apache.shardingsphere:shardingsphere-infra-context`， Context 的内核运行与元数据刷新机制
+- `org.apache.shardingsphere:shardingsphere-logging-core`，日志记录核心
+- `org.apache.shardingsphere:shardingsphere-mask-core`，数据脱敏核心
+- `org.apache.shardingsphere:shardingsphere-mysql-dialect-exception`， 数据库网关的 MySQL 实现
+- `org.apache.shardingsphere:shardingsphere-parser-core`， SQL 解析核心
+- `org.apache.shardingsphere:shardingsphere-postgresql-dialect-exception`，数据库网关的 PostgreSQL 实现
+- `org.apache.shardingsphere:shardingsphere-readwrite-splitting-core`，读写分离核心
+- `org.apache.shardingsphere:shardingsphere-shadow-core`，影子库核心
+- `org.apache.shardingsphere:shardingsphere-sharding-cache`，分片缓存，参考未关闭的 https://github.com/apache/shardingsphere/issues/21223
+- `org.apache.shardingsphere:shardingsphere-sharding-core`，数据分片核心
+- `org.apache.shardingsphere:shardingsphere-single-core`，单表（所有的分片数据源中仅唯一存在的表）核心
+- `org.apache.shardingsphere:shardingsphere-sql-federation-core`，联邦查询执行器核心
+- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-advanced`，联邦查询执行器的 `advanced` 实现
+- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-original`，联邦查询执行器的 `original` 实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-mysql`， SQL 解析的 MySQL 方言实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-opengauss`， SQL 解析的 OpenGauss 方言实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-oracle`， SQL 解析的 Oracle 方言解析实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-postgresql`， SQL 解析的 PostgreSQL 方言实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-sql92`， SQL 解析的 SQL 92 方言实现
+- `org.apache.shardingsphere:shardingsphere-sql-parser-sqlserver`， SQL 解析的 SQL Server 方言实现
+- `org.apache.shardingsphere:shardingsphere-standalone-mode-core`，单机模式配置信息持久化定义核心
+- `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-h2`，单机模式配置信息持久化定义的 H2 实现
+- `org.apache.shardingsphere:shardingsphere-traffic-core`，流量治理核心
+- `org.apache.shardingsphere:shardingsphere-transaction-core`， XA 分布式事务管理器核心
+
+如果 ShardingSphere-JDBC 需要使用可选插件，需要在 Maven Central 下载包含其 SPI 实现的 JAR 和其依赖的 JAR。
+
+下以 `groupId:artifactId` 的表现形式列出所有的可选插件。
+
+- 单机模式配置信息持久化定义
+  - `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-mysql`，基于 MySQL 的持久化
+- 集群模式配置信息持久化定义
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`，基于 Zookeeper 的持久化实现
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`，基于 Etcd 的持久化实现
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`，基于 Nacos 的持久化实现
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`，基于 Consul 的持久化实现
+- XA 分布式事务管理器
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-narayana`，基于 Narayana 的 XA 分布式事务管理器
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-bitronix`，基于 Bitronix 的 XA 分布式事务管理器
+- SQL 翻译
+  - `org.apache.shardingsphere:shardingsphere-sql-translator-jooq-provider`，使用 JooQ 的 SQL 翻译器
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.en.md
new file mode 100644
index 00000000000..01bf4b7b1f2
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/optional-plugins/_index.en.md
@@ -0,0 +1,58 @@
++++
+title = "Optional Plugins"
+weight = 6
++++
+
+ShardingSphere only includes the implementation of the core SPI by default, and there is a part of the SPI that contains third-party dependencies in Git Source
+Implemented plugins are not included. Retrievable at https://central.sonatype.dev/.
+
+SPI and existing implementation classes of SPI corresponding to all plugins can be retrieved at https://shardingsphere.apache.org/document/current/cn/dev-manual/.
+
+All the built-in plugins for ShardingSphere-JDBC are listed below in the form of 'groupId:artifactId'.
+
+- `org.apache.shardingsphere:shardingsphere-authority-core`, the user authority to load the logical core
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-core`, the persistent definition core of cluster mode configuration information
+- `org.apache.shardingsphere:shardingsphere-db-discovery-core`, high availability core
+- `org.apache.shardingsphere:shardingsphere-encrypt-core`, data encryption core
+- `org.apache.shardingsphere:shardingsphere-encrypt-sm`, the SM encrypt algorithm.
+- `org.apache.shardingsphere:shardingsphere-infra-context`, the kernel operation and metadata refresh mechanism of Context
+- `org.apache.shardingsphere:shardingsphere-logging-core`, logging core
+- `org.apache.shardingsphere:shardingsphere-mask-core`, data masking core
+- `org.apache.shardingsphere:shardingsphere-mysql-dialect-exception`, MySQL implementation of database gateway
+- `org.apache.shardingsphere:shardingsphere-parser-core`, SQL parsing core
+- `org.apache.shardingsphere:shardingsphere-postgresql-dialect-exception`, PostgreSQL implementation of database
+- `org.apache.shardingsphere:shardingsphere-readwrite-splitting-core`, read-write splitting core
+- `org.apache.shardingsphere:shardingsphere-shadow-core`, shadow library core
+- `org.apache.shardingsphere:shardingsphere-sharding-cache`, sharding cache,refer to https://github.com/apache/shardingsphere/issues/21223
+- `org.apache.shardingsphere:shardingsphere-sharding-core`, data sharding core
+- `org.apache.shardingsphere:shardingsphere-single-core`, single-table (only the only table that exists in all sharded data sources) core
+- `org.apache.shardingsphere:shardingsphere-sql-federation-core`, federation query executor core
+- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-advanced`, the `advanced` implementation of federated query executor
+- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-original`, the `original` implementation of federated query executor
+- `org.apache.shardingsphere:shardingsphere-sql-parser-mysql`, MySQL dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-sql-parser-opengauss`, OpenGauss dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-sql-parser-oracle`, Oracle dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-sql-parser-postgresql`, PostgreSQL dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-sql-parser-sql92`,the SQL 92 dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-sql-parser-sqlserver`, SQL Server dialect implementation of SQL parsing
+- `org.apache.shardingsphere:shardingsphere-standalone-mode-core`, the persistence definition core of single-machine mode configuration information
+- `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-h2`, H2 implementation of persistent definition of configuration information in stand-alone mode
+- `org.apache.shardingsphere:shardingsphere-traffic-core`, traffic governance core
+- `org.apache.shardingsphere:shardingsphere-transaction-core`, XA Distributed Transaction Manager Core
+
+If ShardingSphere-JDBC needs to use optional plugins, you need to download the JAR containing its SPI implementation and its dependent JARs from Maven Central.
+
+All optional plugins are listed below in the form of `groupId:artifactId`.
+
+- Standalone mode configuration information persistence definition
+  - `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-mysql`, MySQL based persistence
+- Cluster mode configuration information persistence definition
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`, Zookeeper based persistence
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`, Etcd based persistence
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`, Nacos based persistence
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`, Consul based persistence
+- XA transaction manager provider definition
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-narayana`, XA distributed transaction manager based on Narayana
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-bitronix`, XA distributed transaction manager based on Bitronix
+- SQL translator
+  - `org.apache.shardingsphere:shardingsphere-sql-translator-jooq-provider`, JooQ SQL translator
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.cn.md
index 28037eecdc1..c9ff26b7e3a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.cn.md
@@ -68,7 +68,18 @@ mode:
       timeToLiveSeconds: 60
 ```
 
+使用持久化仓库需要额外引入对应的 Maven 依赖，推荐使用：
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-cluster-mode-repository-zookeeper</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
 ## 相关参考
 
 - [ZooKeeper 注册中心安装与使用](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
 - 持久化仓库类型的详情，请参见[内置持久化仓库类型列表](/cn/user-manual/common-config/builtin-algorithm/metadata-repository/)。
+- 持久化仓库的可选实现，请参见[ShardingSphere-JDBC 可选插件](/cn/user-manual/shardingsphere-jdbc/optional-plugins/)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.en.md
index c3306bd2d64..afa41b13e93 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/mode.en.md
@@ -68,7 +68,18 @@ mode:
       timeToLiveSeconds: 60
 ```
 
+Using the persistent repository requires additional introduction of the corresponding Maven dependencies. It is recommended to use:
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-cluster-mode-repository-zookeeper</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
 ## Related References
 
 - [Installation and Usage of ZooKeeper Registry Center](https://zookeeper.apache.org/doc/r3.7.1/zookeeperStarted.html)
 - Please refer to [Builtin Persist Repository List](/en/user-manual/common-config/builtin-algorithm/metadata-repository/) for more details about the type of repository.
+- Please refer to [ShardingSphere-JDBC Optional Plugins](/en/user-manual/shardingsphere-jdbc/optional-plugins/) for more implementations of the persistent repository.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.cn.md
index 7935bfebd95..fdd993d79ba 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.cn.md
@@ -8,8 +8,11 @@ ShardingSphere 默认情况下仅包含核心 SPI 的实现，在 Git Source 存
 
 所有插件对应的 SPI 和 SPI 的已有实现类均可在 https://shardingsphere.apache.org/document/current/cn/dev-manual/ 检索。
 
-下以 `groupId:artifactId` 的表现形式列出所有的内置插件。
+下以 `groupId:artifactId` 的表现形式列出 ShardingSphere-Proxy 所有的内置插件。
 
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`，集群模式配置信息持久化定义的 etcd 实现
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`，集群模式配置信息持久化定义的 zookeeper 实现
+- `org.apache.shardingsphere:shardingsphere-jdbc-core`， JDBC 核心模块
 - `org.apache.shardingsphere:shardingsphere-db-protocol-core`，数据库协议核心
 - `org.apache.shardingsphere:shardingsphere-mysql-protocol`，数据库协议的 MySQL 实现
 - `org.apache.shardingsphere:shardingsphere-postgresql-protocol`，数据库协议的 PostgreSQL 实现
@@ -18,51 +21,21 @@ ShardingSphere 默认情况下仅包含核心 SPI 的实现，在 Git Source 存
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-mysql`，用于 ShardingSphere-Proxy 解析与适配访问数据库的协议的 MySQL 实现
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-postgresql`，用于 ShardingSphere-Proxy 解析与适配访问数据库的协议的 PostgreSQL 实现
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-opengauss`，用于 ShardingSphere-Proxy 解析与适配访问数据库的协议的 openGauss 实现
-- `org.apache.shardingsphere:shardingsphere-proxy-backend`，ShardingSphere Proxy 的后端
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`，集群模式配置信息持久化定义的 zookeeper 实现 
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`，集群模式配置信息持久化定义的 etcd 实现
-- `org.apache.shardingsphere:shardingsphere-jdbc-core`
-
-对于核心的 `org.apache.shardingsphere:shardingsphere-jdbc-core`，其内置如下插件。
-
-- `org.apache.shardingsphere:shardingsphere-transaction-core`，XA 分布式事务管理器核心
-- `org.apache.shardingsphere:shardingsphere-sql-parser-sql92`，SQL 解析的 SQL 92 方言实现
-- `org.apache.shardingsphere:shardingsphere-sql-parser-mysql`，SQL 解析的 MySQL 方言实现
-- `org.apache.shardingsphere:shardingsphere-sql-parser-postgresql`，SQL 解析的 PostgreSQL 方言实现
-- `org.apache.shardingsphere:shardingsphere-sql-parser-oracle`，SQL 解析的 Oracle 方言解析实现
-- `org.apache.shardingsphere:shardingsphere-sql-parser-sqlserver`，SQL 解析的 SQL Server 方言实现
-- `org.apache.shardingsphere:shardingsphere-sql-parser-opengauss`，SQL 解析的 OpenGauss 方言实现
-- `org.apache.shardingsphere:shardingsphere-mysql-dialect-exception`， 数据库网关的 MySQL 实现
-- `org.apache.shardingsphere:shardingsphere-postgresql-dialect-exception`，数据库网关的 PostgreSQL 实现
-- `org.apache.shardingsphere:shardingsphere-authority-core`，用户权限加载逻辑核心
-- `org.apache.shardingsphere:shardingsphere-single-table-core`，单表（所有的分片数据源中仅唯一存在的表）核心
-- `org.apache.shardingsphere:shardingsphere-traffic-core`，流量治理核心
-- `org.apache.shardingsphere:shardingsphere-infra-context`，Context 的内核运行与元数据刷新机制
+- `org.apache.shardingsphere:shardingsphere-proxy-backend-core`， ShardingSphere Proxy 的后端核心模块
+- `org.apache.shardingsphere:shardingsphere-sharding-cache`， 分片缓存，参考未关闭的 https://github.com/apache/shardingsphere/issues/21223
 - `org.apache.shardingsphere:shardingsphere-standalone-mode-core`，单机模式配置信息持久化定义核心
-- `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-h2`，单机模式配置信息持久化定义的 H2 实现
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-core`，集群模式配置信息持久化定义核心
-- `org.apache.shardingsphere:shardingsphere-sharding-core`，数据分片核心
-- `org.apache.shardingsphere:shardingsphere-sharding-cache`
-  ，参考未关闭的 https://github.com/apache/shardingsphere/issues/21223
-- `org.apache.shardingsphere:shardingsphere-readwrite-splitting-core`，读写分离核心
-- `org.apache.shardingsphere:shardingsphere-db-discovery-core`，高可用核心
-- `org.apache.shardingsphere:shardingsphere-encrypt-core`，数据加密核心
-- `org.apache.shardingsphere:shardingsphere-mask-core`，数据脱敏核心
-- `org.apache.shardingsphere:shardingsphere-shadow-core`，影子库核心
-- `org.apache.shardingsphere:shardingsphere-sql-federation-core`，联邦查询执行器核心
-- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-advanced`，联邦查询执行器的 `advanced` 实现
-- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-original`，联邦查询执行器的 `original` 实现
-- `org.apache.shardingsphere:shardingsphere-parser-core`，SQL 解析核心
 
-如果 ShardingSphere Proxy 需要使用可选插件，需要在 Maven Central 下载包含其 SPI 实现的 JAR 和其依赖的 JAR。
+对于核心的 `org.apache.shardingsphere:shardingsphere-jdbc-core`，其内置插件参考[ShardingSphere-JDBC 可选插件](/cn/user-manual/shardingsphere-jdbc/optional-plugins/)。
+
+如果 ShardingSphere-Proxy 需要使用可选插件，需要在 Maven Central 下载包含其 SPI 实现的 JAR 和其依赖的 JAR。
 
 下以 `groupId:artifactId` 的表现形式列出所有的可选插件。
 
 - 单机模式配置信息持久化定义
   - `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-mysql`，基于 MySQL 的持久化
 - 集群模式配置信息持久化定义
-  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`，基于 Nacos 的持久化
-  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`，基于 Consul 的持久化
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`，基于 Nacos 的持久化实现
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`，基于 Consul 的持久化实现
 - XA 分布式事务管理器
   - `org.apache.shardingsphere:shardingsphere-transaction-xa-narayana`，基于 Narayana 的 XA 分布式事务管理器
   - `org.apache.shardingsphere:shardingsphere-transaction-xa-bitronix`，基于 Bitronix 的 XA 分布式事务管理器
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.en.md
index 1a2d7bbdcad..3870a310619 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/optional-plugins/_index.en.md
@@ -3,15 +3,16 @@ title = "Optional Plugins"
 weight = 6
 +++
 
-ShardingSphere only includes the implementation of the core SPI by default, and there is a part of the SPI that contains
-third-party dependencies in Git Source
+ShardingSphere only includes the implementation of the core SPI by default, and there is a part of the SPI that contains third-party dependencies in Git Source
 Implemented plugins are not included. Retrievable at https://central.sonatype.dev/.
 
-SPI and existing implementation classes of SPI corresponding to all plugins can be retrieved
-at https://shardingsphere.apache.org/document/current/cn/dev-manual/.
+SPI and existing implementation classes of SPI corresponding to all plugins can be retrieved at https://shardingsphere.apache.org/document/current/cn/dev-manual/.
 
-All built-in plugins are listed below in the form of `groupId:artifactId`.
+All the built-in plugins for ShardingSphere-Proxy are listed below in the form of 'groupId:artifactId'.
 
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`, etcd implementation of persistent definition of cluster mode configuration information
+- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`, the zookeeper implementation of the persistent definition of cluster mode configuration information
+- `org.apache.shardingsphere:shardingsphere-jdbc-core`, JDBC core
 - `org.apache.shardingsphere:shardingsphere-db-protocol-core`, database protocol core
 - `org.apache.shardingsphere:shardingsphere-mysql-protocol`, the MySQL implementation of the database protocol
 - `org.apache.shardingsphere:shardingsphere-postgresql-protocol`, the PostgreSQL implementation of the database protocol
@@ -20,64 +21,23 @@ All built-in plugins are listed below in the form of `groupId:artifactId`.
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-mysql`, a MySQL implementation for ShardingSphere-Proxy to parse and adapt the protocol for accessing the database
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-postgresql`, a PostgreSQL implementation for ShardingSphere-Proxy to parse and adapt the protocol for accessing the database
 - `org.apache.shardingsphere:shardingsphere-proxy-frontend-opengauss`, an openGauss implementation for ShardingSphere-Proxy to parse and adapt the protocol for accessing the database
-- `org.apache.shardingsphere:shardingsphere-proxy-backend`, the backend for ShardingSphere Proxy
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-zookeeper`, the zookeeper implementation of the persistent definition of cluster mode configuration information
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-etcd`, etcd implementation of persistent definition of cluster mode configuration information
-- `org.apache.shardingsphere:shardingsphere-jdbc-core`
-
-For the core `org.apache.shardingsphere:shardingsphere-jdbc-core`, the following plugins are built-in.
+- `org.apache.shardingsphere:shardingsphere-proxy-backend-core`, the backend core for ShardingSphere Proxy
+- `org.apache.shardingsphere:shardingsphere-sharding-cache`, sharding cache, refer to https://github.com/apache/shardingsphere/issues/21223
+- `org.apache.shardingsphere:shardingsphere-standalone-mode-core`, the persistence definition core of single-machine mode configuration information
 
-- `org.apache.shardingsphere:shardingsphere-transaction-core`, XA Distributed Transaction Manager Core
-- `org.apache.shardingsphere:shardingsphere-sql-parser-sql92`, the SQL 92 dialect implementation of SQL parsing
-- `org.apache.shardingsphere:shardingsphere-sql-parser-mysql`, MySQL dialect implementation of SQL parsing
-- `org.apache.shardingsphere:shardingsphere-sql-parser-postgresql`, PostgreSQL dialect implementation of SQL parsing
-- `org.apache.shardingsphere:shardingsphere-sql-parser-oracle`, Oracle dialect parsing implementation for SQL parsing
-- `org.apache.shardingsphere:shardingsphere-sql-parser-sqlserver`, the SQL Server dialect implementation of SQL parsing
-- `org.apache.shardingsphere:shardingsphere-sql-parser-opengauss`, the OpenGauss dialect implementation of SQL parsing
-- `org.apache.shardingsphere:shardingsphere-mysql-dialect-exception`, MySQL implementation of database gateway
-- `org.apache.shardingsphere:shardingsphere-postgresql-dialect-exception`, PostgreSQL implementation of database
-  gateway
-- `org.apache.shardingsphere:shardingsphere-authority-core`, the user authority to load the logical core
-- `org.apache.shardingsphere:shardingsphere-single-table-core`, single-table (only the only table that exists in all
-  sharded data sources) core
-- `org.apache.shardingsphere:shardingsphere-traffic-core`, traffic governance core
-- `org.apache.shardingsphere:shardingsphere-infra-context`, the kernel operation and metadata refresh mechanism of
-  Context
-- `org.apache.shardingsphere:shardingsphere-standalone-mode-core`, the persistence definition core of single-machine
-  mode configuration information
-- `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-h2`, H2 implementation of persistent
-  definition of configuration information in stand-alone mode
-- `org.apache.shardingsphere:shardingsphere-cluster-mode-core`, the persistent definition core of cluster mode
-  configuration information
-- `org.apache.shardingsphere:shardingsphere-sharding-core`, data sharding core
-- `org.apache.shardingsphere:shardingsphere-sharding-cache`, refer
-  to https://github.com/apache/shardingsphere/issues/21223
-- `org.apache.shardingsphere:shardingsphere-readwrite-splitting-core`, read-write splitting core
-- `org.apache.shardingsphere:shardingsphere-db-discovery-core`, high availability core
-- `org.apache.shardingsphere:shardingsphere-mask-core`, data masking core
-- `org.apache.shardingsphere:shardingsphere-encrypt-core`, data encryption core
-- `org.apache.shardingsphere:shardingsphere-shadow-core`, shadow library core
-- `org.apache.shardingsphere:shardingsphere-sql-federation-core`, federation query executor core
-- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-advanced`, the `advanced` implementation of
-  federated query executor
-- `org.apache.shardingsphere:shardingsphere-sql-federation-executor-original`, the `original` implementation of
-  federated query executor
-- `org.apache.shardingsphere:shardingsphere-parser-core`, SQL parsing core
+For the core `org.apache.shardingsphere:shardingsphere-jdbc-core`,Its built-in plugins reference[ShardingSphere-JDBC Optional Plugins](/en/user-manual/shardingsphere-jdbc/optional-plugins/).
 
-If ShardingSphere Proxy needs to use optional plugins, you need to download the JAR containing its SPI implementation
-and its dependent JARs from Maven Central.
+If ShardingSphere Proxy needs to use optional plugins, you need to download the JAR containing its SPI implementation and its dependent JARs from Maven Central.
 
 All optional plugins are listed below in the form of `groupId:artifactId`.
 
 - Standalone mode configuration information persistence definition
-  - `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-mysql`，MySQL based persistence
+  - `org.apache.shardingsphere:shardingsphere-standalone-mode-repository-jdbc-mysql`, MySQL based persistence
 - Cluster mode configuration information persistence definition
-    - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`, Nacos based persistence
-    - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`, Consul based persistence
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-nacos`, Nacos based persistence
+  - `org.apache.shardingsphere:shardingsphere-cluster-mode-repository-consul`, Consul based persistence
 - XA transaction manager provider definition
-    - `org.apache.shardingsphere:shardingsphere-transaction-xa-narayana`, XA distributed transaction manager based on
-      Narayana
-    - `org.apache.shardingsphere:shardingsphere-transaction-xa-bitronix`, XA distributed transaction manager based on
-      Bitronix
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-narayana`, XA distributed transaction manager based on Narayana
+  - `org.apache.shardingsphere:shardingsphere-transaction-xa-bitronix`, XA distributed transaction manager based on Bitronix
 - SQL translator
-    - `org.apache.shardingsphere:shardingsphere-sql-translator-jooq-provider`, JooQ SQL translator
+  - `org.apache.shardingsphere:shardingsphere-sql-translator-jooq-provider`, JooQ SQL translator
