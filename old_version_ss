commit 8c9043584e4d3ef9fc5e0d009f285290d988dc17
Author: zhaojinchao <zhaojinchao@apache.org>
Date:   Fri May 5 15:20:02 2023 +0800

    Remove ha document (#25464)

diff --git a/docs/document/content/overview/_index.cn.md b/docs/document/content/overview/_index.cn.md
index 2f057592a50..be5c9042e52 100644
--- a/docs/document/content/overview/_index.cn.md
+++ b/docs/document/content/overview/_index.cn.md
@@ -37,7 +37,6 @@ ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数
 | 数据分片  | 数据分片，是应对海量数据存储与计算的有效手段。ShardingSphere 基于底层数据库提供分布式数据库解决方案，可以水平扩展计算和存储。                              |
 | 分布式事务 | 事务能力，是保障数据库完整、安全的关键技术，也是数据库的核心技术。基于 XA 和 BASE 的混合事务引擎，ShardingSphere 提供在独立数据库上的分布式事务功能，保证跨数据源的数据安全。 |
 | 读写分离  | 读写分离，是应对高压力业务访问的手段。基于对 SQL 语义理解及对底层数据库拓扑感知能力，ShardingSphere 提供灵活的读写流量拆分和读流量负载均衡。                    |
-| 高可用   | 高可用，是对数据存储计算平台的基本要求。ShardingSphere 提供基于原生或 Kubernetes 环境下数据库集群的分布式高可用能力。                            |
 | 数据迁移  | 数据迁移，是打通数据生态的关键能力。ShardingSphere 提供跨数据源的数据迁移能力，并可支持重分片扩展。                                           |
 | 联邦查询  | 联邦查询，是面对复杂数据环境下利用数据的有效手段。ShardingSphere 提供跨数据源的复杂查询分析能力，实现跨源的数据关联与聚合。                               |
 | 数据加密  | 数据加密，是保证数据安全的基本手段。ShardingSphere 提供完整、透明、安全、低成本的数据加密解决方案。                                           |
@@ -102,7 +101,7 @@ Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核
 
 用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。
 组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。
-主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。
+主要包括数据分片、读写分离、数据加密、影子库等。
 用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。
 
 #### L3 生态层
diff --git a/docs/document/content/overview/_index.en.md b/docs/document/content/overview/_index.en.md
index 767c8e7bedc..54cdf33dc01 100644
--- a/docs/document/content/overview/_index.en.md
+++ b/docs/document/content/overview/_index.en.md
@@ -38,7 +38,6 @@ ShardingSphere-Proxy is a transparent database proxy, providing a database serve
 | Data Sharding           | Data sharding is an effective way to deal with massive data storage and computing. ShardingSphere provides a distributed database solution based on the underlying database, which can scale computing and storage horizontally.                                                                                                             |
 | Distributed Transaction | Transactional capability is key to ensuring database integrity and security and is also one of the databases' core technologies. With a hybrid engine based on XA and BASE transactions, ShardingSphere provides distributed transaction capabilities on top of standalone databases, enabling data security across underlying data sources. |
 | Read/write Splitting    | Read/write splitting can be used to cope with business access with high stress. ShardingSphere provides flexible read/write splitting capabilities and can achieve read access load balancing based on the understanding of SQL semantics and the ability to perceive the underlying database topology.                                      |
-| High Availability       | High availability is a basic requirement for a data storage and computing platform. Guarantee the HA of your distributed database cluster with ShardingSphere’s Operator on Kubernetes, and the native HA of your existing data sources.                                                                                                     |
 | Data Migration          | Data migration is the key to connecting data ecosystems. ShardingSphere provides migration capabilities to help users migrate the data from other data sources, while simultaneously performing data sharding.                                                                                                                               |
 | Query Federation        | Federated queries are effective in utilizing data in a complex data environment. ShardingSphere provides complex data query and analysis capabilities across data sources, simplifying the data aggregation from different data locations.                                                                                                   |
 | Data Encryption         | Data Encryption is a basic way to ensure data security. ShardingSphere provides a complete, transparent, secure, and low-cost data encryption solution.                                                                                                                                                                                      |
@@ -105,7 +104,7 @@ It includes a query optimizer, distributed transaction engine, distributed execu
 Used to provide enhancement capabilities.
 All components are optional, allowing you to choose whether to include zero or multiple components.
 Components are isolated from each other, and multiple components can be used together by overlaying.
-It includes data sharding, read/write splitting, database high availability, data encryption and shadow database and so on.
+It includes data sharding, read/write splitting, data encryption and shadow database and so on.
 The user-defined feature can be fully customized and extended for the top-level interface defined by Apache ShardingSphere without changing kernel codes.
 
 #### L3 Ecosystem Layer
diff --git a/docs/document/content/user-manual/error-code/sql-error-code.cn.md b/docs/document/content/user-manual/error-code/sql-error-code.cn.md
index de0c6e04fa0..fa767be4801 100644
--- a/docs/document/content/user-manual/error-code/sql-error-code.cn.md
+++ b/docs/document/content/user-manual/error-code/sql-error-code.cn.md
@@ -230,21 +230,6 @@ SQL 错误码以标准的 SQL State，Vendor Code 和详细错误信息提供，
 | 42S02     | 20296       | Not found load balance type in database \`%s\.`                                             |
 | 44000     | 20297       | Weight load balancer datasource name config does not match data sources in database \`%s\.` |
 
-### 数据库高可用
-
-| SQL State | Vendor Code | 错误信息                                                                         |
-|-----------|-------------|------------------------------------------------------------------------------|
-| 44000     | 20300       | No available database discovery rule configuration in database \`%s\`.       |
-| 44000     | 20301       | Group name is required.                                                      |
-| 44000     | 20302       | Data source names are required.                                              |
-| 44000     | 20303       | Can not found database discovery data source rule in database \`%s\`.        |
-| HY000     | 20380       | MGR plugin is not active in database \`%s\`.                                 |
-| 44000     | 20381       | MGR is not in single primary mode in database \`%s\`.                        |
-| 44000     | 20382       | \`%s\` is not in MGR replication group member in database \`%s\`.            |
-| 44000     | 20383       | Group name in MGR is not same with configured one \`%s\` in database \`%s\`. |
-| 42S01     | 20390       | MySQL Duplicate primary data source in database \`%s\`.                      |
-| 42S02     | 20391       | Primary data source not found in database \`%s\`.                            |
-
 ### SQL 方言转换
 
 | SQL State | Vendor Code | 错误信息                                                |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/algorithm.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/algorithm.cn.md
index d8bd8659bc9..9c7c6f8d425 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/algorithm.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/algorithm.cn.md
@@ -40,14 +40,6 @@ Map<String, AlgorithmConfiguration> algorithmConfigs = new HashMap<>();
 algorithmConfigs.put("shadowAlgorithmName", new AlgorithmConfiguration("xxx", new Properties()));
 ```
 
-## 高可用
-
-```java
-// discoveryTypeName 由用户指定，需要和数据库发现规则中的 discoveryTypeName 属性一致
-Map<String, AlgorithmConfiguration> algorithmConfigs = new HashMap<>();
-algorithmConfigs.put("discoveryTypeName", new AlgorithmConfiguration("xxx", new Properties()));
-```
-
 ## 脱敏算法
 
 ```java
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/algorithm.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/algorithm.cn.md
index d2811223bf9..bb3cf4b81a3 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/algorithm.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/algorithm.cn.md
@@ -51,17 +51,6 @@ shadowAlgorithms:
       xxx: xxx
 ```
 
-## 高可用
-
-```yaml
-discoveryTypes:
-  # discoveryTypeName 由用户指定，需要和数据库发现规则中的 discoveryTypeName 属性一致
-  <discoveryTypeName>:
-    type: xxx
-    props:
-      xxx: xxx
-```
-
 ## 脱敏算法
 
 ```yaml
